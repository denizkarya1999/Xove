@using Xove.Web.Helpers
@using Xove.Shared
@using Xove.Shared.Features.Partners
@inject ISnackbar Snackbar

@if (_partner != null)
{
<EditForm Model="@_partner" OnValidSubmit="HandleSubmitAsync">
    <ServerSideValidator @ref="_serverSideValidator" />
    <MudText Typo="Typo.h6">@_transactionMode</MudText>
    <EpiFormLayout>
        <EpiFormBody>
            <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple />
            <MudFab HtmlTag="label"
        Color="Color.Primary"
        Icon="@Icons.Filled.Image"
        Label="Upload Profile Picture"
        for="fileInput" />

        @if (files != null)
{
    <MudList>
    @foreach (var file in files)
    {
     <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
         @file.Name <code>@file.Size bytes</code>
     </MudListItem>
    }
    </MudList>
}

            <MudTextField @bind-Value="_partner.FullName" Label="Full Name" Variant="Variant.Text" Margin="Margin.Normal"
                          For="@(()=> _partner.FullName)"></MudTextField>
            <MudTextField @bind-Value="_partner.Age" Label="Age" Variant="Variant.Text" Margin="Margin.Normal"
                          For="@(()=> _partner.Age)"></MudTextField>
            <MudSelect @bind-Value="_partner.Gender" T="string" Label="Gender" Variant="Variant.Text">
                          <MudSelectItem Value="@("Man")" />
                          <MudSelectItem Value="@("Cis Man")" />
                          <MudSelectItem Value="@("Trans Man")" />
                          <MudSelectItem Value="@("Woman")" />
                          <MudSelectItem Value="@("Cis Woman")" />
                          <MudSelectItem Value="@("Trans Woman")" />
                          <MudSelectItem Value="@("Non-binary")" />
                          <MudSelectItem Value="@("Intersex")" />
                          <MudSelectItem Value="@("Gender not listed here")" />
                          <MudSelectItem Value="@("Prefer not to say")" /></MudSelect>
            <MudSelect @bind-Value="_partner.SexualOrientation" T="string" Label="Sexual Orientation" Variant="Variant.Text">
                          <MudSelectItem Value="@("Asexual")" />
                          <MudSelectItem Value="@("Bisexual")" />
                          <MudSelectItem Value="@("Gay")" />
                          <MudSelectItem Value="@("Lesbian")" />
                          <MudSelectItem Value="@("Straight")" />
                          <MudSelectItem Value="@("Pansexual")" />
                          <MudSelectItem Value="@("Queer")" />
                          <MudSelectItem Value="@("Sexual orientation not listed here")" />
                          <MudSelectItem Value="@("Prefer not to say")" /></MudSelect>
            <MudTextField @bind-Value="_partner.CurrentPosition" Label="Current Position" Variant="Variant.Text" Margin="Margin.Normal"
                          For="@(()=> _partner.CurrentPosition)"></MudTextField>
            <MudTextField @bind-Value="_partner.Location" Label="Location" Variant="Variant.Text" Margin="Margin.Normal"
                          For="@(()=> _partner.Location)"></MudTextField>
            <MudTextField @bind-Value="_partner.Interests" Label="Interests and Hobbies" Variant="Variant.Text" Margin="Margin.Normal"
                          For="@(()=> _partner.Interests)"></MudTextField>
            <MudTextField @bind-Value="_partner.ShortBiography" Label="Biography" Variant="Variant.Text" Margin="Margin.Normal"
                          For="@(()=> _partner.ShortBiography)"></MudTextField>
             
<MudPaper @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Height="300px" Outlined="true" Class="@DragClass">
    @if (!Clearing)
    {
        <InputFile OnChange="OnInputFileChanged" multiple  class="absolute mud-width-full mud-height-full overflow-hidden z-2" style="opacity:0;" />
    }
    <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Image" Title="Favorite" /> Drag and drop your pictures here or click</MudText>
    @foreach (var file in fileNames)
    {
        <MudChip Color="Color.Dark" Text="@file" />
    }
</MudPaper>
<MudToolBar DisableGutters="true" Class="gap-4">
    <MudButton OnClick="Upload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
    <MudButton OnClick="Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
</MudToolBar>
        </EpiFormBody>
        <EpiFormActions>
            @if (_isEditing)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Delete">Delete</MudButton>
            }

            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Cancel" Class="ml-4" Disabled="IsProcessing">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-2" Disabled="IsProcessing" @onclick="@(() => Snackbar.Add("Operation completed successfully", Severity.Success))">Save</MudButton>
        </EpiFormActions>
    </EpiFormLayout>
</EditForm>
}

@code {
    private bool Clearing = false;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();

    private ServerSideValidator _serverSideValidator;
    private bool _isEditing = false;
    private string _transactionMode = "Adding a Potential Partner";
    private PartnerFormModel _partner = new PartnerFormModel();

    [Parameter] public PartnerFormModel Partner { get; set; }
    [Parameter] public bool IsProcessing { get; set; } = false;
    [Parameter] public CommandResponse CommandResponse { get; set; }
    [Parameter] public Action OnCancel { get; set; }
    [Parameter] public Func<Guid, Task> OnDelete { get; set; }
    [Parameter] public Func<PartnerFormModel, Task> OnSubmit { get; set; }

    private async Task HandleSubmitAsync() => await OnSubmit(_partner);
    private void Cancel() => OnCancel();
    private void Delete() => OnDelete(_partner.Id);

    protected override void OnParametersSet()
    {
        if (Partner != null)
        {
            _partner.Id = Partner.Id;
            _partner.FullName = Partner.FullName;
            _partner.Age = Partner.Age;
            _partner.Gender = Partner.Gender;
            _partner.SexualOrientation = Partner.SexualOrientation;
            _partner.CurrentPosition = Partner.CurrentPosition;
            _partner.Location = Partner.Location;
            _partner.Interests = Partner.Interests;
            _partner.ShortBiography = Partner.ShortBiography;

            _isEditing = true;
            _transactionMode = "Editing a Potential Partner";
        }

        if (CommandResponse != null && !CommandResponse.IsSuccessful)
        {
            _serverSideValidator.DisplayErrors(CommandResponse.Errors);
        }
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach(var file in files)
        {
            fileNames.Add(file.Name);
        }
    }

    private async Task Clear()
    {
        Clearing = true;
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
        Clearing = false;
    }
    private void Upload()
    {
        //Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("This feature will be added in the future", Severity.Warning);
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
        //TODO upload the files to the server
    }
}
